"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8460],{1153:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=n(5893),i=n(1151);const r={sidebar_position:19,title:"Types"},o=void 0,c={id:"types",title:"Types",description:"Own types, interfaces and enums",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/react-native-template-strong/docs/types",draft:!1,unlisted:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/types.md",tags:[],version:"current",lastUpdatedAt:1633614778,formattedLastUpdatedAt:"Oct 7, 2021",sidebarPosition:19,frontMatter:{sidebar_position:19,title:"Types"},sidebar:"tutorialSidebar",previous:{title:"Detox",permalink:"/react-native-template-strong/docs/testing/detox"},next:{title:"Patches",permalink:"/react-native-template-strong/docs/patches"}},a={},d=[{value:"Own types, interfaces and enums",id:"own-types-interfaces-and-enums",level:2},{value:"Dependency types",id:"dependency-types",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"own-types-interfaces-and-enums",children:"Own types, interfaces and enums"}),"\n",(0,s.jsxs)(t.p,{children:["There are many types, interfaces and enums which are being used in this template, they are all included in ",(0,s.jsx)(t.a,{href:"https://github.com/svbutko/react-native-template-strong/blob/main/template/src/types/index.ts",children:"types/index.ts"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"If you have some interface, type or enum which you are going to use in different places and it's sort of global then add it in this file."}),"\n",(0,s.jsx)(t.p,{children:"To briefly describe what each currently existed interface/type/enum does:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"AppEnvironment"})," - enum of your environments"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"INavigationPage"})," - minimal needed description of your navigation pages"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"IOnboardingData"})," - interface of each of the carousel/case item from ",(0,s.jsx)(t.code,{children:"Onboarding"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"LoadState"})," - important enum which is responsible to setting current state of your lists stored in redux, and visual representation of items based on it"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TouchablePlatformProps"})," - copy of ",(0,s.jsx)(t.code,{children:"PressableProps"})," with slight changes of ",(0,s.jsx)(t.code,{children:"style"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ButtonType"})," - enum of ",(0,s.jsx)(t.a,{href:"/react-native-template-strong/docs/components/primary-button",children:"PrimaryButton"})," type representation;"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ISize"})," - enum of possible sizes for your style constants ",(0,s.jsx)(t.a,{href:"https://github.com/svbutko/react-native-template-strong/blob/main/template/src/core/theme/commonSizes.ts",children:"commonSizes"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"IListState"})," - simple interface to store necessary list data, mostly used with ",(0,s.jsx)(t.a,{href:"/react-native-template-strong/docs/components/flat-list-wrapper",children:"FlatListWrapper"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ISection"})," - same as ",(0,s.jsx)(t.code,{children:"IListState"})," but for ",(0,s.jsx)(t.a,{href:"/react-native-template-strong/docs/components/section-list-wrapper",children:"SectionListWrapper"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"RehydrateAppAction"})," - interface for rehydrated params (our redux root state) which comes when ",(0,s.jsx)(t.code,{children:"rehydrate"})," occurs"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ErrorRepresentationType"})," - enum of possible errors which will be shown to user when using API requests or text input validations"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"IErrorResult"})," - result of error representation"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ITextInputMask"})," - interface which is used for creation of input masks"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"dependency-types",children:"Dependency types"}),"\n",(0,s.jsxs)(t.p,{children:["If you'd like to change or add types for dependencies from ",(0,s.jsx)(t.code,{children:"node_modules"}),"\nthen you can check the already existing ",(0,s.jsx)(t.a,{href:"https://github.com/svbutko/react-native-template-strong/blob/main/template/src/types/react-native-config.d.ts",children:"react-native-config.d.ts"}),"\ntype and create your own by following next steps:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Create a file in ",(0,s.jsx)(t.a,{href:"https://github.com/svbutko/react-native-template-strong/tree/main/template/src/types",children:"types"})," with name of your dependency like so e.g. ",(0,s.jsx)(t.code,{children:"react-native-config.d.ts"})]}),"\n",(0,s.jsx)(t.li,{children:"Declare a module"}),"\n",(0,s.jsx)(t.li,{children:"Add needed types and interfaces"}),"\n",(0,s.jsx)(t.li,{children:"Create proper (default or not) exports"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["TypeScript uses ",(0,s.jsx)(t.code,{children:"types"})," folder to check for additional types so after making your changes they will be seen in action immediately."]})]})}function p(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>o});var s=n(7294);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);