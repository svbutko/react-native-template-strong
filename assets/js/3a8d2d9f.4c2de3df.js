"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[945],{9503:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=t(5893),i=t(1151);const r={sidebar_position:3,title:"Detox"},o=void 0,d={unversionedId:"testing/detox",id:"testing/detox",title:"Detox",description:"Content",source:"@site/docs/testing/detox.md",sourceDirName:"testing",slug:"/testing/detox",permalink:"/react-native-template-strong/docs/testing/detox",draft:!1,unlisted:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/testing/detox.md",tags:[],version:"current",lastUpdatedAt:1633684154,formattedLastUpdatedAt:"Oct 8, 2021",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Detox"},sidebar:"tutorialSidebar",previous:{title:"Storybook",permalink:"/react-native-template-strong/docs/testing/storybook"},next:{title:"Types",permalink:"/react-native-template-strong/docs/types"}},a={},c=[{value:"Content",id:"content",level:2},{value:"Adding tests",id:"adding-tests",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"iOS",id:"ios",level:3},{value:"Android",id:"android",level:3},{value:"Changing devices",id:"changing-devices",level:2}];function l(e){const n=Object.assign({h2:"h2",p:"p",a:"a",code:"code",pre:"pre",h3:"h3"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"content",children:"Content"}),"\n",(0,s.jsx)(n.p,{children:"Detox tests are e2e (end-to-end) tests which are testing your mobile app while running in a real device/simulator, interacting with it just like a real user."}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about Detox, check ",(0,s.jsx)(n.a,{href:"https://github.com/wix/Detox",children:"this page"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All the tests are located in ",(0,s.jsx)(n.code,{children:"e2e"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Each created test file should follow the next template: ",(0,s.jsx)(n.code,{children:"testName.e2e.ts"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"adding-tests",children:"Adding tests"}),"\n",(0,s.jsxs)(n.p,{children:["See how you can add tests ",(0,s.jsx)(n.a,{href:"https://github.com/wix/Detox/blob/master/docs/Introduction.WritingFirstTest.md#step-3-add-testids-to-your-app-to-assist-in-matching-elements",children:"here"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"There's already a simple test to check how well the initial running process works:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import {expect} from "detox";\n\ndescribe("Startup", () => {\n  beforeAll(async () => {\n    await device.launchApp();\n  });\n\n  it("Is first run", async () => {\n    await expect(element(by.id("OnboardingButtonID"))).toBeVisible();\n    await element(by.id("OnboardingButtonID")).tap();\n  });\n\n  it("Should show tabs", async () => {\n    await expect(element(by.id("MainPageID"))).toExist();\n  });\n});\n\n'})}),"\n",(0,s.jsx)(n.h2,{id:"running-tests",children:"Running tests"}),"\n",(0,s.jsxs)(n.p,{children:["You can run your tests in ",(0,s.jsx)(n.code,{children:"debug"})," and ",(0,s.jsx)(n.code,{children:"release"})," environments."]}),"\n",(0,s.jsx)(n.p,{children:"Before running them you have to build them."}),"\n",(0,s.jsx)(n.p,{children:"To do so do run the following scripts:"}),"\n",(0,s.jsx)(n.h3,{id:"ios",children:"iOS"}),"\n",(0,s.jsxs)(n.p,{children:["For debug:\n",(0,s.jsx)(n.code,{children:"npm run e2e:ios-debug"})]}),"\n",(0,s.jsxs)(n.p,{children:["For release:\n",(0,s.jsx)(n.code,{children:"npm run e2e:build-ios-release"})]}),"\n",(0,s.jsx)(n.p,{children:"To run the tests:"}),"\n",(0,s.jsxs)(n.p,{children:["For debug:\n",(0,s.jsx)(n.code,{children:"npm run e2e:ios-debug"})]}),"\n",(0,s.jsxs)(n.p,{children:["For release:\n",(0,s.jsx)(n.code,{children:"npm run e2e:ios-release"})]}),"\n",(0,s.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,s.jsxs)(n.p,{children:["For debug:\n",(0,s.jsx)(n.code,{children:"npm run e2e:build-android-debug"})]}),"\n",(0,s.jsxs)(n.p,{children:["For release:\n",(0,s.jsx)(n.code,{children:"npm run e2e:build-android-release"})]}),"\n",(0,s.jsx)(n.p,{children:"To run the tests:"}),"\n",(0,s.jsxs)(n.p,{children:["For debug:\n",(0,s.jsx)(n.code,{children:"npm run e2e:android-debug"})]}),"\n",(0,s.jsxs)(n.p,{children:["For release:\n",(0,s.jsx)(n.code,{children:"npm run e2e:android-release"})]}),"\n",(0,s.jsx)(n.h2,{id:"changing-devices",children:"Changing devices"}),"\n",(0,s.jsx)(n.p,{children:"Initially the config is using emulators to run the tests on both iOS and Android:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "devices": {\n    "simulator": {\n      "type": "ios.simulator",\n      "device": {\n        "type": "iPhone 12 Pro"\n      }\n    },\n    "emulator": {\n      "type": "android.emulator",\n      "device": {\n        "avdName": "Pixel_5_API_30"\n      }\n    }\n  },\n  "configurations": {\n    "ios.emu.debug": {\n      "device": "simulator",\n      "app": "ios.debug"\n    },\n    "ios.emu.release": {\n      "device": "simulator",\n      "app": "ios.release"\n    },\n    "android.emu.debug": {\n      "device": "emulator",\n      "app": "android.debug"\n    },\n    "android.emu.release": {\n      "device": "emulator",\n      "app": "android.release"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can change it by adding your own emulators or real devices."}),"\n",(0,s.jsxs)(n.p,{children:["Check ",(0,s.jsx)(n.a,{href:"https://github.com/wix/Detox/blob/master/docs/APIRef.Configuration.md#device-configurations",children:"this page"})," to see how it can be done."]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}},1151:(e,n,t)=>{t.d(n,{Zo:()=>d,ah:()=>r});var s=t(7294);const i=s.createContext({});function r(e){const n=s.useContext(i);return s.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const o={};function d({components:e,children:n,disableParentContext:t}){let d;return d=t?"function"==typeof e?e({}):e||o:r(e),s.createElement(i.Provider,{value:d},n)}}}]);