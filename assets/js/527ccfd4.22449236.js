"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4823],{8539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(4848),i=n(8453);const o={sidebar_position:1,title:"Jest"},r=void 0,a={id:"testing/jest",title:"Jest",description:"Content",source:"@site/docs/testing/jest.md",sourceDirName:"testing",slug:"/testing/jest",permalink:"/react-native-template-strong/docs/testing/jest",draft:!1,unlisted:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/testing/jest.md",tags:[],version:"current",lastUpdatedAt:1633684154e3,sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Jest"},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/react-native-template-strong/docs/api"},next:{title:"Storybook",permalink:"/react-native-template-strong/docs/testing/storybook"}},c={},l=[{value:"Content",id:"content",level:2},{value:"Adding tests",id:"adding-tests",level:2},{value:"Running tests",id:"running-tests",level:2},{value:"Mocks",id:"mocks",level:2},{value:"Coverage",id:"coverage",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"content",children:"Content"}),"\n",(0,s.jsx)(t.p,{children:"Jest tests are simple and target mostly API communication and methods and functions stability and correctness of execution."}),"\n",(0,s.jsxs)(t.p,{children:["To learn more about Jest, check ",(0,s.jsx)(t.a,{href:"https://jestjs.io",children:"this page"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["All the tests are located in ",(0,s.jsx)(t.code,{children:"__tests__"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Each created test file should follow the next template: ",(0,s.jsx)(t.code,{children:"testName.test.ts"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"adding-tests",children:"Adding tests"}),"\n",(0,s.jsx)(t.p,{children:"To add a test, create a file by following previously mentioned template."}),"\n",(0,s.jsx)(t.p,{children:"Describe your tests like so (I'll use localization as example):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'describe("Localization", () => {\n\n});\n'})}),"\n",(0,s.jsx)(t.p,{children:"And add tests itself:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'  test("Current language: EN", () => {\n    expect(getLanguage()).toBe("en");\n  });\n\n  test("Current interface language: EN", () => {\n    expect(getInterfaceLanguage()).toBe("en");\n  });\n\n  test("Set empty language", () => {\n    setLanguage();\n    expect(getLanguage()).toBe("en");\n  });\n\n  test("Set language: EN", () => {\n    setLanguage(Languages.en);\n    expect(getLanguage()).toBe("en");\n  });\n'})}),"\n",(0,s.jsx)(t.h2,{id:"running-tests",children:"Running tests"}),"\n",(0,s.jsxs)(t.p,{children:["You can run individual tests while debugging them in your IDE or if you want to run every single described test you can simply run:\n",(0,s.jsx)(t.code,{children:"npm run tests"}),". Which will show you ",(0,s.jsx)(t.code,{children:"PASSSED"})," and ",(0,s.jsx)(t.code,{children:"FAILED"})," tests."]}),"\n",(0,s.jsx)(t.h2,{id:"mocks",children:"Mocks"}),"\n",(0,s.jsx)(t.p,{children:"Some dependencies or environments require you to be mocked since tests are not running in React Native environment but NodeJS."}),"\n",(0,s.jsxs)(t.p,{children:["For these cases there is a folder called ",(0,s.jsx)(t.code,{children:"__mocks__"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["There's already a simple mock of ",(0,s.jsx)(t.code,{children:"Localization"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'import LocalizedStringsCore from "react-localization";\n\nfunction getInterfaceLanguage() {\n  return "en";\n}\n\nexport default class LocalizedStrings extends LocalizedStringsCore {\n  constructor(props) {\n    super(props, getInterfaceLanguage);\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"It defines that default and used language will be English without trying to get it from the system."}),"\n",(0,s.jsxs)(t.p,{children:['Then this mock is "imported" or better to say "mocked" in ',(0,s.jsx)(t.code,{children:"__tests__/localization.test.ts"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'jest.mock("react-native-localization");\n'})}),"\n",(0,s.jsx)(t.h2,{id:"coverage",children:"Coverage"}),"\n",(0,s.jsx)(t.p,{children:"To check how well you covered files with test you can see it using coverage."}),"\n",(0,s.jsxs)(t.p,{children:["Run ",(0,s.jsx)(t.code,{children:"npm run tests:coverage"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"coverege"})," folder will appear which will give you HTML pages with detailed information, also there will be a print into terminal after the command will be executed."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);