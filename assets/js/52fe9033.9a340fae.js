"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1,title:"Colors"},l=void 0,s={unversionedId:"themes/colors",id:"themes/colors",title:"Colors",description:"Content",source:"@site/docs/themes/colors.md",sourceDirName:"themes",slug:"/themes/colors",permalink:"/react-native-template-strong/docs/themes/colors",draft:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/themes/colors.md",tags:[],version:"current",lastUpdatedAt:1633614778,formattedLastUpdatedAt:"Oct 7, 2021",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Colors"},sidebar:"tutorialSidebar",previous:{title:"Vector icons",permalink:"/react-native-template-strong/docs/resources/vector-icons"},next:{title:"Native colors",permalink:"/react-native-template-strong/docs/themes/native-colors"}},i={},c=[{value:"Content",id:"content",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"content"},"Content"),(0,o.kt)("p",null,"All your colors are stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"/src/core/theme/colors.ts")," as a simple enum:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'export enum Colors {\n  black = "#000000",\n  white = "#FFFFFF",\n  gray = "#F1F1F1",\n  darkGray = "#262626",\n  blue = "#0A60FF",\n  green = "#4DAD4A",\n  red = "#CE3C3E",\n  transparent = "transparent",\n}\n')),(0,o.kt)("p",null,"You can add here simple colors shared by both platforms and which will look the same in ",(0,o.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"light")," themes of your application."),(0,o.kt)("p",null,"You can use this colors next way:"),(0,o.kt)("p",null,"1) In styles:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.transparent,\n  } as ViewStyle,\n});\n")),(0,o.kt)("p",null,"2) In navigation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n      background: {\n        color: Colors.black,\n      },\n      title: {\n        color: Colors.white,\n      },\n    }\n")),(0,o.kt)("p",null,"You can also assign different colors depending on platform using ",(0,o.kt)("a",{parentName:"p",href:"/react-native-template-strong/docs/helpers/color-helpers"},"platformLocalColor"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: platformLocalColor(Colors.black, Colors.red),\n  } as ViewStyle,\n});\n")),(0,o.kt)("p",null,"In navigation, you can also set this colors to ",(0,o.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"light")," themes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n      background: {\n        color: {\n          light: Colors.white,\n          dark: Colors.black,\n        },\n      },\n      title: {\n        color: {\n          light: Colors.black,\n          dark: Colors.white,\n        },\n      },\n    }\n")),(0,o.kt)("p",null,"But it's not preferred, continue reading next to understand why"),(0,o.kt)("p",null,"You probably noticed that there are two more enums in ",(0,o.kt)("inlineCode",{parentName:"p"},"colors.ts"),", these are native colors, they work with ",(0,o.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"light")," themes."),(0,o.kt)("p",null,"Follow to the next page to see how to use and add them."))}d.isMDXComponent=!0}}]);