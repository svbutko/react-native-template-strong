"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7831],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,k=m["".concat(s,".").concat(u)]||m[u]||d[u]||a;return n?o.createElement(k,l(l({ref:t},p),{},{components:n})):o.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:2,title:"Native colors"},l=void 0,i={unversionedId:"themes/native-colors",id:"themes/native-colors",title:"Native colors",description:"Content",source:"@site/docs/themes/native-colors.md",sourceDirName:"themes",slug:"/themes/native-colors",permalink:"/react-native-template-strong/docs/themes/native-colors",draft:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/themes/native-colors.md",tags:[],version:"current",lastUpdatedAt:1633518181,formattedLastUpdatedAt:"Oct 6, 2021",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Native colors"},sidebar:"tutorialSidebar",previous:{title:"Colors",permalink:"/react-native-template-strong/docs/themes/colors"},next:{title:"Component styles",permalink:"/react-native-template-strong/docs/styles/component-styles"}},s={},c=[{value:"Content",id:"content",level:2},{value:"Android",id:"android",level:2},{value:"Content",id:"content-1",level:3},{value:"Usage",id:"usage",level:3},{value:"Add colors",id:"add-colors",level:3},{value:"Native theme constants",id:"native-theme-constants",level:3},{value:"iOS",id:"ios",level:2},{value:"Content",id:"content-2",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Add colors",id:"add-colors-1",level:3},{value:"Native theme constants",id:"native-theme-constants-1",level:3}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"content"},"Content"),(0,r.kt)("p",null,"Native colors are used to work with ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," themes of your application."),(0,r.kt)("p",null,"There are some predefined (Android) and built-in (iOS) color names which are listed as enums in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/core/theme/colors.ts")),(0,r.kt)("p",null,"It's highly recommended to use native colors opposed to JS defined ones to present better user experience with ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," themes"),(0,r.kt)("h2",{id:"android"},"Android"),(0,r.kt)("h3",{id:"content-1"},"Content"),(0,r.kt)("p",null,"There are two sets of colors defined in native resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values/colors.xml")," - for light theme"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values-night/colors.xml")," - for dark theme")),(0,r.kt)("p",null,"They look like this (light theme colors e.g.):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <item name="primary" type="color">#61DAFB</item>\n    <item name="primaryDark" type="color">#2596BE</item>\n    <item name="primaryLight" type="color">#B3E5FC</item>\n    <item name="background" type="color">#FFFFFF</item>\n    <item name="primaryText" type="color">#212121</item>\n    <item name="primaryTextOpacity" type="color">#CC212121</item>\n    <item name="secondaryText" type="color">#757575</item>\n    <item name="onPrimaryText" type="color">#FFFFFF</item>\n    <item name="onPrimaryTextOpacity" type="color">#CCFFFFFF</item>\n    <item name="divider" type="color">#BDBDBD</item>\n    <item name="navigation" type="color">#61DAFB</item>\n    <item name="statusbar" type="color">#0288D1</item>\n</resources>\n\n')),(0,r.kt)("p",null,"For both themes this colors share the same set of items (names) but can have different color values."),(0,r.kt)("p",null,"In React Native they are represented as ",(0,r.kt)("inlineCode",{parentName:"p"},"PlatformColorsAndroid")," enum in ",(0,r.kt)("inlineCode",{parentName:"p"},"src/core/theme/colors.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'export enum PlatformColorsAndroid {\n  primary = "@color/primary",\n  primaryDark = "@color/primaryDark",\n  primaryLight = "@color/primaryLight",\n  background = "@color/background",\n  primaryText = "@color/primaryText",\n  primaryTextOpacity = "@color/primaryTextOpacity",\n  secondaryText = "@color/secondaryText",\n  onPrimaryText = "@color/onPrimaryText",\n  onPrimaryTextOpacity = "@color/onPrimaryTextOpacity",\n  divider = "@color/divider",\n  navigation = "@color/navigation",\n  statusbar = "@color/statusbar",\n}\n')),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"It's not enough to directly use this colors sam way as ones from ",(0,r.kt)("inlineCode",{parentName:"p"},"Colors")," enum."),(0,r.kt)("p",null,"You can use them in styles in multiple ways:"),(0,r.kt)("p",null,"1) Using ",(0,r.kt)("inlineCode",{parentName:"p"},"PlatformColor")," in mix with ",(0,r.kt)("inlineCode",{parentName:"p"},"Platform.select")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    ...Platform.select({\n      android: {\n        backgroundColor: PlatformColor(PlatformColorsAndroid.background),\n      } as ViewStyle,\n    }),\n  } as ViewStyle,\n});\n")),(0,r.kt)("p",null,"2) Using ",(0,r.kt)("a",{parentName:"p",href:"/react-native-template-strong/docs/helpers/color-helpers"},"platformNativeColor")," or ",(0,r.kt)("a",{parentName:"p",href:"/react-native-template-strong/docs/helpers/color-helpers"},"platformMixedColor"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.background),\n  } as ViewStyle,\n});\n")),(0,r.kt)("p",null,"3) To assign native colors in navigation, assign them directly, not separately:"),(0,r.kt)("admonition",{title:"Incorrect",type:"danger"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n      background: {\n        color: {\n          light: PlatformColor(PlatformColorsAndroid.navigation),\n          darK: PlatformColor(PlatformColorsAndroid.navigation),\n        },\n      },\n    }\n"))),(0,r.kt)("admonition",{title:"Correct",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n        background: {\n            color: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.navigation),\n        },\n    }\n"))),(0,r.kt)("h3",{id:"add-colors"},"Add colors"),(0,r.kt)("p",null,"To add more native colors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"item")," in both ",(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values/colors.xml")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values-night/colors.xml"),"\nwith the same name"),(0,r.kt)("li",{parentName:"ul"},"Add your new color name in ",(0,r.kt)("inlineCode",{parentName:"li"},"PlatformColorsAndroid")),(0,r.kt)("li",{parentName:"ul"},"Rebuild your application")),(0,r.kt)("h3",{id:"native-theme-constants"},"Native theme constants"),(0,r.kt)("p",null,"There are some native theme constants which you can change.\nThese constants change things like ",(0,r.kt)("inlineCode",{parentName:"p"},"tint"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"status bar")," colors on native side."),(0,r.kt)("p",null,"They are located in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values/styles.xml")," - for light theme"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"/android/app/src/main/res/values-night/styles.xml")," - for dark theme")),(0,r.kt)("p",null,"And look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n\n<resources>\n    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">\n        \x3c!-- Customize your theme here. --\x3e\n        <item name="android:windowBackground">@color/background</item>\n        <item name="android:statusBarColor">@color/statusbar</item>\n        <item name="colorAccent">@color/primary</item>\n    </style>\n\n    <style name="SplashTheme" parent="Theme.AppCompat.Light.NoActionBar">\n        <item name="android:windowBackground">@drawable/splash_background</item>\n        <item name="android:statusBarColor">@color/statusbar</item>\n    </style>\n</resources>\n')),(0,r.kt)("p",null,"Our app's theme is defined within style ",(0,r.kt)("inlineCode",{parentName:"p"},"AppTheme"),"."),(0,r.kt)("p",null,"You can see that there's a ",(0,r.kt)("inlineCode",{parentName:"p"},"colorAccent")," assigned to our ",(0,r.kt)("inlineCode",{parentName:"p"},"@color/primary"),", this change can be seen in dialogs, alerts and other components."),(0,r.kt)("p",null,"Same goes with ",(0,r.kt)("inlineCode",{parentName:"p"},"android:statusBarColor")," which sets the color of ",(0,r.kt)("inlineCode",{parentName:"p"},"status bar"),"."),(0,r.kt)("p",null,"To check other constant names you can adjust, check Android related resources regarding your components which you'd like to modify."),(0,r.kt)("h2",{id:"ios"},"iOS"),(0,r.kt)("h3",{id:"content-2"},"Content"),(0,r.kt)("p",null,"iOS already has some predefined colors for us, you can check how they look and change with ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," theme in Storybook's colors page."),(0,r.kt)("h3",{id:"usage-1"},"Usage"),(0,r.kt)("p",null,"It's not enough to directly use this colors sam way as ones from ",(0,r.kt)("inlineCode",{parentName:"p"},"Colors")," enum."),(0,r.kt)("p",null,"You can use them in styles in multiple ways:"),(0,r.kt)("p",null,"1) Using ",(0,r.kt)("inlineCode",{parentName:"p"},"PlatformColor")," in mix with ",(0,r.kt)("inlineCode",{parentName:"p"},"Platform.select")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    ...Platform.select({\n      iOS: {\n        backgroundColor: PlatformColor(PlatformColorsIOS.systemBackground),\n      } as ViewStyle,\n    }),\n  } as ViewStyle,\n});\n")),(0,r.kt)("p",null,"2) Using ",(0,r.kt)("a",{parentName:"p",href:"/react-native-template-strong/docs/helpers/color-helpers"},"platformNativeColor")," or ",(0,r.kt)("a",{parentName:"p",href:"/react-native-template-strong/docs/helpers/color-helpers"},"platformMixedColor"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.background),\n  } as ViewStyle,\n});\n")),(0,r.kt)("p",null,"3) To assign native colors in navigation, assign them directly, not separately:"),(0,r.kt)("admonition",{title:"Incorrect",type:"danger"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n      background: {\n        color: {\n          light: PlatformColor(PlatformColorsIOS.systemBackground),\n          darK: PlatformColor(PlatformColorsIOS.systemBackground),\n        },\n      },\n    }\n"))),(0,r.kt)("admonition",{title:"Correct",type:"tip"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"    topBar: {\n        background: {\n            color: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.navigation),\n        },\n    }\n"))),(0,r.kt)("h3",{id:"add-colors-1"},"Add colors"),(0,r.kt)("p",null,"At this moment you can't add your colors natively, but you can define your own colors in a separate enum and use ",(0,r.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/dynamiccolorios"},"DynamicColorIOS"),"."),(0,r.kt)("p",null,"But it would be better to stick to built-in colors to provide better user experience for users."),(0,r.kt)("h3",{id:"native-theme-constants-1"},"Native theme constants"),(0,r.kt)("p",null,"You can define ",(0,r.kt)("inlineCode",{parentName:"p"},"AccentColor")," of your application for both ",(0,r.kt)("inlineCode",{parentName:"p"},"light")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dark")," themes in XCode:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open .xcworkspace file"),(0,r.kt)("li",{parentName:"ul"},"Navigate to Images.xcassets where you'll see your app and splash icons and ",(0,r.kt)("inlineCode",{parentName:"li"},"AccentColor")," which you can change")))}d.isMDXComponent=!0}}]);