"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7831],{2973:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=o(5893),t=o(1151);const s={sidebar_position:2,title:"Native colors"},i=void 0,a={unversionedId:"themes/native-colors",id:"themes/native-colors",title:"Native colors",description:"Content",source:"@site/docs/themes/native-colors.md",sourceDirName:"themes",slug:"/themes/native-colors",permalink:"/react-native-template-strong/docs/themes/native-colors",draft:!1,unlisted:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/themes/native-colors.md",tags:[],version:"current",lastUpdatedAt:1633518181,formattedLastUpdatedAt:"Oct 6, 2021",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Native colors"},sidebar:"tutorialSidebar",previous:{title:"Colors",permalink:"/react-native-template-strong/docs/themes/colors"},next:{title:"Component styles",permalink:"/react-native-template-strong/docs/styles/component-styles"}},l={},c=[{value:"Content",id:"content",level:2},{value:"Android",id:"android",level:2},{value:"Content",id:"content-1",level:3},{value:"Usage",id:"usage",level:3},{value:"Add colors",id:"add-colors",level:3},{value:"Native theme constants",id:"native-theme-constants",level:3},{value:"iOS",id:"ios",level:2},{value:"Content",id:"content-2",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Add colors",id:"add-colors-1",level:3},{value:"Native theme constants",id:"native-theme-constants-1",level:3}];function d(e){const n=Object.assign({h2:"h2",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",ol:"ol",a:"a",admonition:"admonition"},(0,t.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"content",children:"Content"}),"\n",(0,r.jsxs)(n.p,{children:["Native colors are used to work with ",(0,r.jsx)(n.code,{children:"dark"})," and ",(0,r.jsx)(n.code,{children:"light"})," themes of your application."]}),"\n",(0,r.jsxs)(n.p,{children:["There are some predefined (Android) and built-in (iOS) color names which are listed as enums in ",(0,r.jsx)(n.code,{children:"src/core/theme/colors.ts"})]}),"\n",(0,r.jsxs)(n.p,{children:["It's highly recommended to use native colors opposed to JS defined ones to present better user experience with ",(0,r.jsx)(n.code,{children:"dark"})," and ",(0,r.jsx)(n.code,{children:"light"})," themes"]}),"\n",(0,r.jsx)(n.h2,{id:"android",children:"Android"}),"\n",(0,r.jsx)(n.h3,{id:"content-1",children:"Content"}),"\n",(0,r.jsx)(n.p,{children:"There are two sets of colors defined in native resources:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values/colors.xml"})," - for light theme"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values-night/colors.xml"})," - for dark theme"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"They look like this (light theme colors e.g.):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <item name="primary" type="color">#61DAFB</item>\n    <item name="primaryDark" type="color">#2596BE</item>\n    <item name="primaryLight" type="color">#B3E5FC</item>\n    <item name="background" type="color">#FFFFFF</item>\n    <item name="primaryText" type="color">#212121</item>\n    <item name="primaryTextOpacity" type="color">#CC212121</item>\n    <item name="secondaryText" type="color">#757575</item>\n    <item name="onPrimaryText" type="color">#FFFFFF</item>\n    <item name="onPrimaryTextOpacity" type="color">#CCFFFFFF</item>\n    <item name="divider" type="color">#BDBDBD</item>\n    <item name="navigation" type="color">#61DAFB</item>\n    <item name="statusbar" type="color">#0288D1</item>\n</resources>\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"For both themes this colors share the same set of items (names) but can have different color values."}),"\n",(0,r.jsxs)(n.p,{children:["In React Native they are represented as ",(0,r.jsx)(n.code,{children:"PlatformColorsAndroid"})," enum in ",(0,r.jsx)(n.code,{children:"src/core/theme/colors.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export enum PlatformColorsAndroid {\n  primary = "@color/primary",\n  primaryDark = "@color/primaryDark",\n  primaryLight = "@color/primaryLight",\n  background = "@color/background",\n  primaryText = "@color/primaryText",\n  primaryTextOpacity = "@color/primaryTextOpacity",\n  secondaryText = "@color/secondaryText",\n  onPrimaryText = "@color/onPrimaryText",\n  onPrimaryTextOpacity = "@color/onPrimaryTextOpacity",\n  divider = "@color/divider",\n  navigation = "@color/navigation",\n  statusbar = "@color/statusbar",\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["It's not enough to directly use this colors sam way as ones from ",(0,r.jsx)(n.code,{children:"Colors"})," enum."]}),"\n",(0,r.jsx)(n.p,{children:"You can use them in styles in multiple ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.code,{children:"PlatformColor"})," in mix with ",(0,r.jsx)(n.code,{children:"Platform.select"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const styles = StyleSheet.create({\n  container: {\n    ...Platform.select({\n      android: {\n        backgroundColor: PlatformColor(PlatformColorsAndroid.background),\n      } as ViewStyle,\n    }),\n  } as ViewStyle,\n});\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.a,{href:"/react-native-template-strong/docs/helpers/color-helpers",children:"platformNativeColor"})," or ",(0,r.jsx)(n.a,{href:"/react-native-template-strong/docs/helpers/color-helpers",children:"platformMixedColor"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.background),\n  } as ViewStyle,\n});\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"To assign native colors in navigation, assign them directly, not separately:"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Incorrect",type:"danger",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    topBar: {\n      background: {\n        color: {\n          light: PlatformColor(PlatformColorsAndroid.navigation),\n          darK: PlatformColor(PlatformColorsAndroid.navigation),\n        },\n      },\n    }\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Correct",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    topBar: {\n        background: {\n            color: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.navigation),\n        },\n    }\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"add-colors",children:"Add colors"}),"\n",(0,r.jsx)(n.p,{children:"To add more native colors:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create ",(0,r.jsx)(n.code,{children:"item"})," in both ",(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values/colors.xml"})," and ",(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values-night/colors.xml"}),"\nwith the same name"]}),"\n",(0,r.jsxs)(n.li,{children:["Add your new color name in ",(0,r.jsx)(n.code,{children:"PlatformColorsAndroid"})]}),"\n",(0,r.jsx)(n.li,{children:"Rebuild your application"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"native-theme-constants",children:"Native theme constants"}),"\n",(0,r.jsxs)(n.p,{children:["There are some native theme constants which you can change.\nThese constants change things like ",(0,r.jsx)(n.code,{children:"tint"}),", ",(0,r.jsx)(n.code,{children:"status bar"})," colors on native side."]}),"\n",(0,r.jsx)(n.p,{children:"They are located in:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values/styles.xml"})," - for light theme"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/android/app/src/main/res/values-night/styles.xml"})," - for dark theme"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"And look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n\n<resources>\n    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">\n        \x3c!-- Customize your theme here. --\x3e\n        <item name="android:windowBackground">@color/background</item>\n        <item name="android:statusBarColor">@color/statusbar</item>\n        <item name="colorAccent">@color/primary</item>\n    </style>\n\n    <style name="SplashTheme" parent="Theme.AppCompat.Light.NoActionBar">\n        <item name="android:windowBackground">@drawable/splash_background</item>\n        <item name="android:statusBarColor">@color/statusbar</item>\n    </style>\n</resources>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Our app's theme is defined within style ",(0,r.jsx)(n.code,{children:"AppTheme"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can see that there's a ",(0,r.jsx)(n.code,{children:"colorAccent"})," assigned to our ",(0,r.jsx)(n.code,{children:"@color/primary"}),", this change can be seen in dialogs, alerts and other components."]}),"\n",(0,r.jsxs)(n.p,{children:["Same goes with ",(0,r.jsx)(n.code,{children:"android:statusBarColor"})," which sets the color of ",(0,r.jsx)(n.code,{children:"status bar"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To check other constant names you can adjust, check Android related resources regarding your components which you'd like to modify."}),"\n",(0,r.jsx)(n.h2,{id:"ios",children:"iOS"}),"\n",(0,r.jsx)(n.h3,{id:"content-2",children:"Content"}),"\n",(0,r.jsxs)(n.p,{children:["iOS already has some predefined colors for us, you can check how they look and change with ",(0,r.jsx)(n.code,{children:"dark"})," and ",(0,r.jsx)(n.code,{children:"light"})," theme in Storybook's colors page."]}),"\n",(0,r.jsx)(n.h3,{id:"usage-1",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["It's not enough to directly use this colors sam way as ones from ",(0,r.jsx)(n.code,{children:"Colors"})," enum."]}),"\n",(0,r.jsx)(n.p,{children:"You can use them in styles in multiple ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.code,{children:"PlatformColor"})," in mix with ",(0,r.jsx)(n.code,{children:"Platform.select"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const styles = StyleSheet.create({\n  container: {\n    ...Platform.select({\n      iOS: {\n        backgroundColor: PlatformColor(PlatformColorsIOS.systemBackground),\n      } as ViewStyle,\n    }),\n  } as ViewStyle,\n});\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.a,{href:"/react-native-template-strong/docs/helpers/color-helpers",children:"platformNativeColor"})," or ",(0,r.jsx)(n.a,{href:"/react-native-template-strong/docs/helpers/color-helpers",children:"platformMixedColor"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const styles = StyleSheet.create({\n  container: {\n    backgroundColor: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.background),\n  } as ViewStyle,\n});\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"To assign native colors in navigation, assign them directly, not separately:"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Incorrect",type:"danger",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    topBar: {\n      background: {\n        color: {\n          light: PlatformColor(PlatformColorsIOS.systemBackground),\n          darK: PlatformColor(PlatformColorsIOS.systemBackground),\n        },\n      },\n    }\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Correct",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    topBar: {\n        background: {\n            color: platformNativeColor(PlatformColorsIOS.systemBackground, PlatformColorsAndroid.navigation),\n        },\n    }\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"add-colors-1",children:"Add colors"}),"\n",(0,r.jsxs)(n.p,{children:["At this moment you can't add your colors natively, but you can define your own colors in a separate enum and use ",(0,r.jsx)(n.a,{href:"https://reactnative.dev/docs/dynamiccolorios",children:"DynamicColorIOS"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"But it would be better to stick to built-in colors to provide better user experience for users."}),"\n",(0,r.jsx)(n.h3,{id:"native-theme-constants-1",children:"Native theme constants"}),"\n",(0,r.jsxs)(n.p,{children:["You can define ",(0,r.jsx)(n.code,{children:"AccentColor"})," of your application for both ",(0,r.jsx)(n.code,{children:"light"})," and ",(0,r.jsx)(n.code,{children:"dark"})," themes in XCode:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open .xcworkspace file"}),"\n",(0,r.jsxs)(n.li,{children:["Navigate to Images.xcassets where you'll see your app and splash icons and ",(0,r.jsx)(n.code,{children:"AccentColor"})," which you can change"]}),"\n"]})]})}const h=function(e={}){const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(d,e)})):d(e)}},1151:(e,n,o)=>{o.d(n,{Zo:()=>a,ah:()=>s});var r=o(7294);const t=r.createContext({});function s(e){const n=r.useContext(t);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const i={};function a({components:e,children:n,disableParentContext:o}){let a;return a=o?"function"==typeof e?e({}):e||i:s(e),r.createElement(t.Provider,{value:a},n)}}}]);