"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[880],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),y=o,d=u["".concat(l,".").concat(y)]||u[y]||m[y]||s;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5229:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return m}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:1,title:"Component styles"},l=void 0,c={unversionedId:"styles/component-styles",id:"styles/component-styles",title:"Component styles",description:"Content",source:"@site/docs/styles/component-styles.md",sourceDirName:"styles",slug:"/styles/component-styles",permalink:"/react-native-template-strong/docs/styles/component-styles",editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/styles/component-styles.md",tags:[],version:"current",lastUpdatedAt:1633405147,formattedLastUpdatedAt:"10/5/2021",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Component styles"},sidebar:"tutorialSidebar",previous:{title:"Native colors",permalink:"/react-native-template-strong/docs/themes/native-colors"},next:{title:"Common styles",permalink:"/react-native-template-strong/docs/styles/common-styles"}},p={},m=[{value:"Content",id:"content",level:2},{value:"Creating",id:"creating",level:2},{value:"Merging",id:"merging",level:2},{value:"Usage",id:"usage",level:2}],u={toc:m};function y(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"content"},"Content"),(0,s.kt)("p",null,"Component styles are stored withing its own file at the very bottom of it"),(0,s.kt)("p",null,"The conventional method of creating styles for components is by using ",(0,s.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/stylesheet"},"StyleSheet.create"),"."),(0,s.kt)("h2",{id:"creating"},"Creating"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'const styles = StyleSheet.create({\n  container: {\n    padding: CommonSizes.spacing.medium,\n  } as ViewStyle,\n  title: {\n    fontWeight: "600",\n    textAlign: "center",\n    marginBottom: CommonSizes.spacing.extraSmall,\n  } as TextStyle,\n  description: {\n    textAlign: "center",\n  } as TextStyle,\n});\n')),(0,s.kt)("p",null,"Every style has to be assigned to its proper interface (",(0,s.kt)("inlineCode",{parentName:"p"},"ViewStyle"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"TextStyle"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ImageStyle")," etc.) to have proper types and validations by TypeScript."),(0,s.kt)("h2",{id:"merging"},"Merging"),(0,s.kt)("p",null,"To merge styles simply use spread operator like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'const styles = StyleSheet.create({\n  container: {\n    ...CommonStyles.flexCenter,\n    padding: CommonSizes.spacing.medium,\n  } as ViewStyle,\n  title: {\n    ...CommonStyles.normalText,\n    fontWeight: "600",\n    textAlign: "center",\n    marginBottom: CommonSizes.spacing.extraSmall,\n  } as TextStyle,\n  description: {\n    ...CommonStyles.normalText,\n    textAlign: "center",\n  } as TextStyle,\n});\n')),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"Use the styles constant and appropriate parameter like so:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"    <View style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n      <Text style={styles.description}>{description}</Text>\n    </View>\n")))}y.isMDXComponent=!0}}]);