"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3922],{1526:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=n(5893),o=n(1151);const i={sidebar_position:1,title:"Fonts"},r=void 0,c={unversionedId:"resources/fonts",id:"resources/fonts",title:"Fonts",description:"Content",source:"@site/docs/resources/fonts.md",sourceDirName:"resources",slug:"/resources/fonts",permalink:"/react-native-template-strong/docs/resources/fonts",draft:!1,unlisted:!1,editUrl:"https://github.com/svbutko/react-native-template-strong/master/website/docs/resources/fonts.md",tags:[],version:"current",lastUpdatedAt:1633518181,formattedLastUpdatedAt:"Oct 6, 2021",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Fonts"},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/react-native-template-strong/docs/redux/hooks"},next:{title:"Images",permalink:"/react-native-template-strong/docs/resources/images"}},l={},d=[{value:"Content",id:"content",level:2},{value:"Accessing fonts",id:"accessing-fonts",level:2},{value:"Adding fonts",id:"adding-fonts",level:2}];function a(e){const t=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"content",children:"Content"}),"\n",(0,s.jsxs)(t.p,{children:["Currently, there is only a single font which is used, and it's ",(0,s.jsx)(t.code,{children:"system"}),".\nIt's a system font which is used on device."]}),"\n",(0,s.jsx)(t.h2,{id:"accessing-fonts",children:"Accessing fonts"}),"\n",(0,s.jsxs)(t.p,{children:["To access a font in your code, you need to use ",(0,s.jsx)(t.code,{children:"fonts.ts"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'export const Fonts = {\n  system: "System",\n};\n'})}),"\n",(0,s.jsx)(t.p,{children:"To use it you simply can create a style and use it like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"const styles = StyleSheet.create({\n  text: {\n    fontFamily: Fonts.system\n  } as TextStyle\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["There's also a default combination of font styles which is stored in ",(0,s.jsx)(t.code,{children:"commonStyles"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export const CommonStyles = StyleSheet.create({\n    normalText: {\n        fontFamily: Fonts.system,\n        fontSize: CommonSizes.font.medium,\n        lineHeight: CommonSizes.lineHeight.medium,\n        color: platformNativeColor(PlatformColorsIOS.label, PlatformColorsAndroid.primaryText),\n    } as TextStyle,\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"To use it you can simply call it like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",metastring:"jsx",children:"      <Text style={CommonStyles.normalText} numberOfLines={1}>\n        {localization.common.loading}\n      </Text>\n"})}),"\n",(0,s.jsx)(t.h2,{id:"adding-fonts",children:"Adding fonts"}),"\n",(0,s.jsx)(t.p,{children:"To add your custom fonts you need to do the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Place your ",(0,s.jsx)(t.code,{children:".ttf"})," or ",(0,s.jsx)(t.code,{children:".otf"})," font/s in ",(0,s.jsx)(t.code,{children:"resources/fonts"})," folder"]}),"\n",(0,s.jsxs)(t.li,{children:["Run ",(0,s.jsx)(t.code,{children:"react-native link"}),", it will add your fonts to native resources folders"]}),"\n",(0,s.jsxs)(t.li,{children:["Add your font inside ",(0,s.jsx)(t.code,{children:"Fonts"})]}),"\n",(0,s.jsx)(t.li,{children:"Rebuild your application"}),"\n",(0,s.jsx)(t.li,{children:"Use your newly added fonts"}),"\n"]})]})}const u=function(e={}){const{wrapper:t}=Object.assign({},(0,o.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}},1151:(e,t,n)=>{n.d(t,{Zo:()=>c,ah:()=>i});var s=n(7294);const o=s.createContext({});function i(e){const t=s.useContext(o);return s.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const r={};function c({components:e,children:t,disableParentContext:n}){let c;return c=n?"function"==typeof e?e({}):e||r:i(e),s.createElement(o.Provider,{value:c},t)}}}]);